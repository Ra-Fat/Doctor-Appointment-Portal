# 🏥 Doctor Appointment Portal (CLI)

A **Command-Line Interface (CLI) application** for managing a hospital system, doctors, patients, and appointments.  
Built with **Dart**. The goal of the project is to practice **OOP concepts, CLI interaction, and unit testing** while collaborating as a team.

The project is **collaborative**, with each team member responsible for specific modules. All modules are integrated into the main CLI interface with proper test coverage.

---

## 👥 Team Roles & Contributions

### 👨‍💼 Ra FaT (Hospital & Doctor Manager)

- Implements **Hospital** and **Doctor** classes.  
- Handles core system logic and doctor management.  
- Integrates with CLI interface.

### 🔍 Chey Rotana (Patient & Appointment Manager)

- Implements **Patient** and **Appointment** classes.  
- Handles scheduling, booking, and appointment management.  
- Integrates with CLI interface.

### 🛠️ Both

- Combine all modules into the **main CLI**.  
- Write **unit test cases** for each module.  
- Ensure smooth and consistent CLI experience.

---

## 🛠️ Technologies Used

- **Dart** – Programming language for all modules.  
- **CLI (Command-Line Interface)** – User interaction via terminal.  
- **Dart Test** – Unit testing framework for module verification.

---

## 🧠 Dart Concepts Used

### 🔹 Classes & OOP

- Encapsulation, constructors, methods.  
- Example: `Doctor`, `Patient`, `Appointment`, `Hospital`.

### 🔹 CLI Interaction

- Input/output handling for user commands.  
- Menus, prompts, and navigation in the terminal.

### 🔹 Collections

- Lists, Maps, and other data structures to store doctors, patients, and appointments.

### 🔹 Testing

- Unit tests for every class to ensure correctness and reliability.
